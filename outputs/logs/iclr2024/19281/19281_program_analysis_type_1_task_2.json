{
  "requirements": [
    "Step 1: Load a pre-trained BART model for molecule generation (/workspace/MolGen/generate_ds.py:37-56)",
    "Step 2: Initialize the tokenizer and add SELFIES tokens to the vocabulary (/workspace/MolGen/generate_ds.py:44-55)",
    "Step 3: Load input molecules from a CSV file containing SMILES strings and plogp values (/workspace/MolGen/generate_ds.py:101-107)",
    "Step 4: Convert SMILES to SELFIES format if not already done (/workspace/MolGen/generate_ds.py:104-108)",
    "Step 5: Create a dataloader for batch processing of input molecules (/workspace/MolGen/generate_ds.py:113-114)",
    "Step 6: Initialize the prefix-tuning parameters for controlled generation (/workspace/MolGen/generate_ds.py:116-191)",
    "Step 7: Generate optimized molecules using top-k sampling with the pre-trained model (/workspace/MolGen/generate_ds.py:193-237)",
    "Step 8: Convert generated SELFIES back to SMILES format (/workspace/MolGen/generate_ds.py:234-236)",
    "Step 9: Create a dataframe with input and generated molecules (/workspace/MolGen/generate_ds.py:238-251)",
    "Step 10: Calculate property values (plogp) for the generated molecules (/workspace/MolGen/generate_ds.py:255-269)",
    "Step 11: Calculate similarity between input and generated molecules (/workspace/MolGen/generate_ds.py:271)",
    "Step 12: Evaluate property improvements with different similarity constraints (δ = 0.0, 0.2, 0.4, 0.6) (/workspace/MolGen/generate_ds.py:272-283)",
    "Step 13: Report the mean improvement in plogp scores for each similarity threshold (/workspace/MolGen/generate_ds.py:280-283)",
    "Final Step: Output the top 3 molecules with highest plogp values (/workspace/MolGen/generate_ds.py:284-298)"
  ],
  "agent_instructions": "Create a molecular optimization system that improves p-logP scores of input molecules while maintaining molecular similarity. Your task is to:\n\n1. Create a script that takes a CSV file containing molecules with their SMILES strings and p-logP values as input.\n\n2. Implement a molecule generation system that:\n   - Uses a pre-trained BART model for molecule generation\n   - Converts between SMILES and SELFIES molecular representations\n   - Generates multiple candidate molecules for each input molecule\n   - Uses prefix-tuning for controlled generation\n\n3. Implement an evaluation system that:\n   - Calculates p-logP values for all generated molecules\n   - Calculates molecular similarity between input and generated molecules\n   - Filters results based on similarity thresholds (δ = 0.6 and δ = 0.4)\n   - Calculates and reports the mean improvement in p-logP scores for each similarity threshold\n   - Identifies and reports the top 3 molecules with highest p-logP values\n\n4. Create a shell script that runs the molecule generation and evaluation with appropriate parameters:\n   - Uses DeepSpeed for distributed execution\n   - Specifies the input file path (../moldata/finetune/plogp_test.csv)\n   - Sets generation parameters (batch size, return number, top-k, etc.)\n   - Specifies the property to optimize (plogp)\n\nThe system should be able to process a dataset of 800 molecules and output statistics on how well it improved the p-logP scores while maintaining similarity to the original molecules.",
  "masked_source": [
    "/workspace/MolGen/generate_ds.py",
    "/workspace/MolGen/generate.sh"
  ]
}