[
  {
    "mode": "B",
    "question": "How can you create a simple rule-based agent that prioritizes city building in the CivRealm environment?",
    "method": "Create a RandomAgent class that inherits from BaseAgent and implements the act method to prioritize building cities when possible, otherwise moving units randomly.",
    "expected_outcome": "A working agent that builds cities with 80% probability when possible, otherwise moves units randomly. The agent should be able to play through multiple turns in the CivRealm environment.",
    "source": [
      "/workspace/docs/getting_started/first_agent.md",
      "/workspace/src/civrealm/agents/base_agent.py",
      "/workspace/src/civrealm/random_game.py"
    ],
    "usage_instructions": "1. Create a RandomAgent class that inherits from BaseAgent.\n2. Implement the random_action_by_name method to find actions by name in the valid_action_dict.\n3. Implement the act method to get the next valid actor and its actions.\n4. If a unit can build a city, make it do so with 80% probability.\n5. Otherwise, make the unit move randomly.\n6. Create a main function that initializes the FreecivBase-v0 environment.\n7. Create an instance of your RandomAgent.\n8. Implement a game loop that gets observations, calls the agent's act method, and steps the environment.\n9. Print information about each step, including step number, turn, reward, termination status, and action taken.\n10. Close the environment and plot the game scores when done.",
    "requirements": [
      "Step 1: Import necessary libraries including random and BaseAgent (/workspace/docs/getting_started/first_agent.md:8-9)",
      "Step 2: Create a RandomAgent class that inherits from BaseAgent (/workspace/docs/getting_started/first_agent.md:11-13)",
      "Step 3: Implement a method to find actions by name in the valid action dictionary (/workspace/docs/getting_started/first_agent.md:15-22)",
      "Step 4: Implement the act method to get the next valid actor and its actions (/workspace/docs/getting_started/first_agent.md:24-27)",
      "Step 5: Check if the actor can build a city, and if so, make it do so with 80% probability (/workspace/docs/getting_started/first_agent.md:31-34)",
      "Step 6: Otherwise, make the unit move randomly (/workspace/docs/getting_started/first_agent.md:36-37)",
      "Step 7: Create a main function that initializes the FreecivBase-v0 environment (/workspace/docs/getting_started/first_agent.md:57-59)",
      "Step 8: Create an instance of the RandomAgent (/workspace/docs/getting_started/first_agent.md:59)",
      "Step 9: Reset the environment and get initial observations (/workspace/docs/getting_started/first_agent.md:61)",
      "Step 10: Implement a game loop that gets observations, calls the agent's act method, and steps the environment (/workspace/docs/getting_started/first_agent.md:63-73)",
      "Step 11: Print information about each step, including step number, turn, reward, termination status, and action taken (/workspace/docs/getting_started/first_agent.md:69-71)",
      "Step 12: Close the environment and plot the game scores when done (/workspace/random_game.py:46-51)"
    ],
    "agent_instructions": "Your task is to create a rule-based agent for the CivRealm environment that prioritizes city building. Follow these steps:\n\n1. Create a RandomAgent class that inherits from the BaseAgent class in the CivRealm framework.\n\n2. Implement a helper method that can find actions by name in a dictionary of valid actions. This method should take a valid action dictionary and a name string as input, then return a randomly selected action whose key contains that name string.\n\n3. Implement the act method that:\n   - Gets the next valid actor (unit) that hasn't acted in the current turn\n   - If a unit can build a city (has a 'build' action available), make it do so with 80% probability\n   - Otherwise, make the unit move randomly (using a 'goto' action)\n   - If there are no valid actors left, return None to end the turn\n\n4. Create a main function that:\n   - Initializes the FreecivBase-v0 environment\n   - Creates an instance of your RandomAgent\n   - Implements a game loop that:\n     * Gets observations from the environment\n     * Calls the agent's act method to get an action\n     * Steps the environment with the chosen action\n     * Prints information about each step (step number, turn, reward, termination status, action taken)\n     * Continues until the game terminates\n   - Closes the environment and plots the game scores when done\n\nThe agent should be able to play through multiple turns in the CivRealm environment, prioritizing city building when possible and otherwise moving units randomly."
  },
  {
    "mode": "B",
    "question": "How can you create a random LLM agent that interacts with the CivRealm LLM environment?",
    "method": "Create a RandomLLMAgent class that inherits from BaseAgent and implements the act method to randomly select actions from the available actions provided by the LLM environment.",
    "expected_outcome": "A working LLM agent that randomly selects actions from the available actions for each actor. The agent should be able to play through multiple turns in the CivRealm LLM environment.",
    "source": [
      "/workspace/docs/getting_started/first_agent.md",
      "/workspace/src/civrealm/agents/base_agent.py",
      "/workspace/src/civrealm/random_game.py"
    ],
    "usage_instructions": "1. Create a RandomLLMAgent class that inherits from BaseAgent.\n2. Initialize the agent with proper seed handling.\n3. Implement the act method to track the current turn and planned actor IDs.\n4. For each control type and actor in the LLM info, check if the actor has already been planned for.\n5. If not, get the available actions for the actor.\n6. If there are available actions, randomly select one and add the actor to the planned list.\n7. Return the selected action as a tuple of (control_type, actor_id, action_name).\n8. Create a main function that initializes the FreecivBase-v0 environment and wraps it with LLMWrapper.\n9. Create an instance of your RandomLLMAgent.\n10. Implement a game loop that gets observations, calls the agent's act method, and steps the environment.\n11. Print information about each step, including step number, turn, reward, termination status, and action taken.\n12. Close the environment and plot the game scores when done.",
    "requirements": [
      "Step 1: Import necessary libraries including random, os, BaseAgent, and other required modules (/workspace/docs/getting_started/first_agent.md:102-103)",
      "Step 2: Create a RandomLLMAgent class that inherits from BaseAgent (/workspace/docs/getting_started/first_agent.md:105)",
      "Step 3: Initialize the agent with proper seed handling, including setting agent seed based on configuration parameters (/workspace/docs/getting_started/first_agent.md:106-113)",
      "Step 4: Implement the act method that tracks the current turn and maintains a list of planned actor IDs (/workspace/docs/getting_started/first_agent.md:115-118)",
      "Step 5: For each control type and actor in the LLM info, check if the actor has already been planned for in the current turn (/workspace/docs/getting_started/first_agent.md:120-123)",
      "Step 6: For unplanned actors, get their available actions from the info dictionary (/workspace/docs/getting_started/first_agent.md:124)",
      "Step 7: If there are available actions, randomly select one action from the list (/workspace/docs/getting_started/first_agent.md:125-126)",
      "Step 8: Add the actor to the planned list and return the selected action as a tuple of (control_type, actor_id, action_name) (/workspace/docs/getting_started/first_agent.md:127-128)",
      "Step 9: Create a main function that initializes the FreecivBase-v0 environment and wraps it with LLMWrapper (/workspace/docs/getting_started/first_agent.md:150-152)",
      "Step 10: Create an instance of the RandomLLMAgent (/workspace/docs/getting_started/first_agent.md:153)",
      "Step 11: Reset the environment and get initial observations and info (/workspace/docs/getting_started/first_agent.md:155)",
      "Step 12: Implement a game loop that gets observations, calls the agent's act method, and steps the environment (/workspace/docs/getting_started/first_agent.md:157-167)",
      "Step 13: Print information about each step, including step number, turn, reward, termination status, and action taken (/workspace/docs/getting_started/first_agent.md:163-166)",
      "Step 14: Close the environment when done (/workspace/docs/getting_started/first_agent.md:171)",
      "Final Step: Add code to plot game scores when the game is finished (/workspace/src/civrealm/random_game.py:51)"
    ],
    "agent_instructions": "Your task is to create a random LLM agent that interacts with the CivRealm LLM environment. The agent should randomly select actions from the available actions provided by the environment.\n\nHere's what you need to implement:\n\n1. Create a RandomLLMAgent class that inherits from BaseAgent.\n\n2. The agent should initialize with proper seed handling. It should check if random seed generation is enabled in the configuration, and if so, use the process ID as the seed. Otherwise, it should use the seed specified in the configuration if available.\n\n3. Implement the act method that:\n   - Tracks the current turn and maintains a list of planned actor IDs\n   - Resets the planned actor list when a new turn begins\n   - Iterates through each control type and actor in the LLM information\n   - Checks if an actor has already been planned for in the current turn\n   - For unplanned actors, gets their available actions\n   - If actions are available, randomly selects one\n   - Adds the actor to the planned list\n   - Returns the selected action as a tuple of (control_type, actor_id, action_name)\n\n4. Create a main function that:\n   - Initializes the FreecivBase-v0 environment\n   - Wraps it with LLMWrapper to provide the LLM interface\n   - Creates an instance of your RandomLLMAgent\n   - Implements a game loop that:\n     * Gets observations from the environment\n     * Calls the agent's act method to get an action\n     * Steps the environment with the selected action\n     * Prints information about each step (step number, turn, reward, termination status, action)\n   - Closes the environment when done\n   - Plots the game scores\n\nThe agent should be able to play through multiple turns in the CivRealm LLM environment by randomly selecting actions for each actor."
  },
  {
    "mode": "A",
    "question": "How can you run a basic game in CivRealm with a random agent and visualize the results?",
    "method": "Use the provided random_game.py script to initialize the CivRealm environment, create a random agent, run the game loop, and visualize the results.",
    "expected_outcome": "A complete game run with a random agent, printing step information and generating game score plots.",
    "source": [
      "/workspace/src/civrealm/random_game.py"
    ],
    "usage_instructions": "1. Import the necessary modules from civrealm.\n2. Create a FreecivBase-v0 environment using gymnasium.make().\n3. Create a RandomAgent instance.\n4. Reset the environment to get initial observations and info.\n5. Implement a game loop that continues until the game is done (terminated or truncated).\n6. In each iteration, get an action from the agent using the current observations and info.\n7. Step the environment with the action to get new observations, reward, termination status, and info.\n8. Print information about the current step, including step number, turn, reward, termination status, and action taken.\n9. Increment the step counter and check if the game is done.\n10. Close the environment when the game is done.\n11. Plot the game scores using env.plot_game_scores().\n12. Get and print the game results using env.get_game_results().",
    "requirements": [
      "Step 1: Import necessary modules from civrealm and gymnasium (/workspace/src/civrealm/random_game.py:17-22)",
      "Step 2: Create a FreecivBase-v0 environment using gymnasium.make() (/workspace/src/civrealm/random_game.py:26)",
      "Step 3: Create a RandomAgent instance (/workspace/src/civrealm/random_game.py:28)",
      "Step 4: Reset the environment to get initial observations and info (/workspace/src/civrealm/random_game.py:30)",
      "Step 5: Initialize game state variables (done flag and step counter) (/workspace/src/civrealm/random_game.py:31-32)",
      "Step 6: Implement a game loop that continues until the game is done (terminated or truncated) (/workspace/src/civrealm/random_game.py:33-45)",
      "Step 7: Within the game loop, get an action from the agent using current observations and info (/workspace/src/civrealm/random_game.py:35)",
      "Step 8: Step the environment with the action to get new observations, reward, termination status, and info (/workspace/src/civrealm/random_game.py:36-37)",
      "Step 9: Print information about the current step (step number, turn, reward, termination status, action) (/workspace/src/civrealm/random_game.py:38-40)",
      "Step 10: Update step counter and check if the game is done (/workspace/src/civrealm/random_game.py:41-42)",
      "Step 11: Handle exceptions that may occur during the game loop (/workspace/src/civrealm/random_game.py:43-45)",
      "Step 12: Close the environment when the game is done (/workspace/src/civrealm/random_game.py:46)",
      "Step 13: Plot the game scores using env.plot_game_scores() (/workspace/src/civrealm/random_game.py:51)",
      "Final Step: Get and print the game results using env.get_game_results() (/workspace/src/civrealm/random_game.py:52-53)"
    ],
    "agent_instructions": "Create a script that runs a basic game in CivRealm with a random agent and visualizes the results. Your script should:\n\n1. Import the necessary modules from civrealm and gymnasium\n2. Create a CivRealm environment using the 'FreecivBase-v0' environment ID\n3. Initialize a random agent that will make decisions in the game\n4. Reset the environment to get the initial game state\n5. Implement a game loop that:\n   - Gets actions from the random agent based on current observations\n   - Steps the environment with these actions\n   - Tracks and displays information about each step (including turn number, rewards, and actions taken)\n   - Continues until the game terminates or is truncated\n6. Handle any exceptions that might occur during gameplay\n7. Properly close the environment when the game ends\n8. Visualize the game results by plotting game scores\n9. Retrieve and display the final game results\n\nThe script should run as a standalone program and demonstrate how the random agent performs in the CivRealm environment."
  },
  {
    "mode": "A",
    "question": "How can you run a mini-game in CivRealm with a controller agent and track minitask information?",
    "method": "Use the provided random_game_minitask.py script to initialize the CivRealm minitask environment, create a controller agent, run the game loop, and track minitask information.",
    "expected_outcome": "A complete mini-game run with a controller agent, printing step information including minitask details and generating game score plots.",
    "source": [
      "/workspace/src/civrealm/random_game_minitask.py"
    ],
    "usage_instructions": "1. Import the necessary modules from civrealm.\n2. Create a FreecivMinitask-v0 environment using gymnasium.make().\n3. Create a ControllerAgent instance.\n4. Reset the environment to get initial observations and info.\n5. Implement a game loop that continues until the game is done (terminated or truncated).\n6. In each iteration, get an action from the agent using the current observations and info.\n7. Step the environment with the action to get new observations, reward, termination status, and info.\n8. Print information about the current step, including step number, turn, reward, termination status, and action taken.\n9. Also print the minitask information from info['minitask'].\n10. Increment the step counter and check if the game is done.\n11. Close the environment when the game is done.\n12. Plot the game scores using env.plot_game_scores().\n13. Get and print the game results using env.get_game_results().",
    "requirements": [
      "Step 1: Import necessary modules from civrealm, gymnasium, and other required libraries (/workspace/src/civrealm/random_game_minitask.py:16-22)",
      "Step 2: Create a FreecivMinitask-v0 environment using gymnasium.make() (/workspace/src/civrealm/random_game_minitask.py:26)",
      "Step 3: Create a ControllerAgent instance (/workspace/src/civrealm/random_game_minitask.py:27)",
      "Step 4: Reset the environment to get initial observations and info (/workspace/src/civrealm/random_game_minitask.py:29)",
      "Step 5: Initialize game state variables (done flag and step counter) (/workspace/src/civrealm/random_game_minitask.py:30-31)",
      "Step 6: Implement a game loop that continues until the game is done (terminated or truncated) (/workspace/src/civrealm/random_game_minitask.py:32-45)",
      "Step 7: Within the game loop, get an action from the agent using current observations and info (/workspace/src/civrealm/random_game_minitask.py:34)",
      "Step 8: Step the environment with the action to get new observations, reward, termination status, and info (/workspace/src/civrealm/random_game_minitask.py:35-36)",
      "Step 9: Print information about the current step, including step number, turn, reward, termination status, and action taken (/workspace/src/civrealm/random_game_minitask.py:37-38)",
      "Step 10: Print the minitask information from info['minitask'] (/workspace/src/civrealm/random_game_minitask.py:39)",
      "Step 11: Increment the step counter and update the done flag (/workspace/src/civrealm/random_game_minitask.py:40-41)",
      "Step 12: Handle exceptions that may occur during the game loop (/workspace/src/civrealm/random_game_minitask.py:42-45)",
      "Step 13: Close the environment when the game is done (/workspace/src/civrealm/random_game_minitask.py:46)",
      "Step 14: Plot the game scores using env.plot_game_scores() (/workspace/src/civrealm/random_game_minitask.py:47)",
      "Step 15: Get and print the game results using env.get_game_results() (/workspace/src/civrealm/random_game_minitask.py:48-49)"
    ],
    "agent_instructions": "Your task is to create a script that runs a mini-game in CivRealm with a controller agent and tracks minitask information. Follow these steps:\n\n1. Import the necessary modules from civrealm, including the ControllerAgent and any required utilities.\n\n2. Create a FreecivMinitask-v0 environment using gymnasium.make().\n\n3. Initialize a ControllerAgent instance that will make decisions in the game.\n\n4. Reset the environment to get the initial observations and info dictionary.\n\n5. Set up a game loop that continues until the game is done (either terminated or truncated).\n\n6. Within each iteration of the game loop:\n   - Get an action from the agent based on current observations and info\n   - Step the environment with the action to get new observations, reward, termination status, and updated info\n   - Print information about the current step, including step number, turn, reward, termination status, and the action taken\n   - Print the minitask-specific information from info['minitask']\n   - Increment your step counter and check if the game is done\n\n7. Implement basic error handling for exceptions that might occur during gameplay.\n\n8. When the game is done, close the environment properly.\n\n9. Generate and display visualizations of the game scores using the environment's plot_game_scores() method.\n\n10. Retrieve and print the final game results using the environment's get_game_results() method.\n\nThe script should provide a complete mini-game run with the controller agent, printing step information including minitask details and generating game score plots."
  }
]