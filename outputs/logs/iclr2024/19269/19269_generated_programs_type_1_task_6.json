{
    "source": ["/workspace/examples/musc_main.py"],
    "usage_instructions": "To evaluate the impact of the RsCIN module with different window mask strategies on anomaly detection performance, you can run the musc_main.py script with different k_list parameters for the RsCIN module. The script already includes the RsCIN module implementation (in models/modules/_RsCIN.py) and uses it in the MuSc model (line 248 in models/musc.py).\n\nTo conduct the experiment:\n\n1. For testing without the RsCIN module, modify line 248 in models/musc.py to use k_list=[0] which bypasses the RsCIN module (as seen in line 24-25 of _RsCIN.py).\n\n2. For testing with a single-window mask strategy, modify line 243-247 in models/musc.py to use specific k values (e.g., k_score = [1, 2] for a single window size k=2).\n\n3. For testing with the multi-window mask strategy (default implementation), keep the existing configuration which uses multiple window sizes (k_score = [1, 2, 3] for MVTec AD and k_score = [1, 8, 9] for VisA).\n\nRun the script for each configuration on both MVTec AD and VisA datasets:\n\npython examples/musc_main.py --device 0 --data_path ./data/mvtec_anomaly_detection/ --dataset_name mvtec_ad --class_name ALL --backbone_name ViT-L-14-336 --pretrained openai --feature_layers 5 11 17 23 --img_resize 518 --divide_num 1 --r_list 1 3 5 --batch_size 4 --output_dir ./output --save_excel True\n\npython examples/musc_main.py --device 0 --data_path ./data/visa/ --dataset_name visa --class_name ALL --backbone_name ViT-L-14-336 --pretrained openai --feature_layers 5 11 17 23 --img_resize 518 --divide_num 1 --r_list 1 3 5 --batch_size 4 --output_dir ./output --save_excel True\n\nThe results will be saved in Excel files in the output directory, showing classification metrics (F1-max score, AUROC) and segmentation metrics (pixel-AUROC, PRO segmentation scores) for each configuration."
}