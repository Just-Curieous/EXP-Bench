{
  "requirements": [
    "Step 1: Parse command line arguments for configuration settings including dataset path, dataset name, class name, device, output directory, visualization options, aggregation degrees (r_list), feature layers, backbone name, pretrained model, image resize dimensions, batch size, and divide number (musc_main.py:11-30)",
    "Step 2: Load configuration from YAML file and override with command line arguments (musc_main.py:32-78)",
    "Step 3: Initialize the MuSc model with the configuration (musc_main.py:86)",
    "Step 4: Load the appropriate backbone model (ViT-L-14-336 with OpenAI pretrained weights) (musc.py:67-76)",
    "Step 5: For each category in the dataset, load test data (musc.py:79-93)",
    "Step 6: Extract features from the test images using the backbone model (musc.py:154-179)",
    "Step 7: Apply the LNAMD (Local Neighborhood Aggregation with Multiple Degrees) module with specified aggregation degrees (r_list) to process features (musc.py:186-202)",
    "Step 8: Apply the MSM (Mutual Scoring Module) to compute anomaly scores across different feature layers (musc.py:205-217)",
    "Step 9: Interpolate anomaly maps to match the original image size (musc.py:222-227)",
    "Step 10: Apply the RsCIN (Robust Score Calibration with Image Neighborhood) module to optimize classification scores (musc.py:248)",
    "Step 11: Compute evaluation metrics for anomaly classification (AC) and segmentation (AS): AUROC, F1 score, AP, and AUPRO (musc.py:255-260)",
    "Step 12: Visualize anomaly maps if visualization is enabled (musc.py:262-264)",
    "Step 13: Calculate mean performance metrics across all categories (musc.py:289-303)",
    "Step 14: Save results to Excel file if save_excel is enabled (musc.py:306-340)",
    "Final Step: Compare results across different aggregation degrees (r values) to evaluate their impact on anomaly detection performance for different anomaly sizes (usage_instructions)"
  ],
  "agent_instructions": "Create a system for anomaly detection in industrial images using the MuSc (Multi-Scale Consensus) framework. The system should:\n\n1. Implement a command-line interface that accepts parameters for:\n   - Dataset path and name (MVTec AD, VisA, etc.)\n   - Class name (specific category or 'ALL' for all categories)\n   - GPU device selection\n   - Output directory for results\n   - Visualization options (True/False)\n   - Backbone model selection (ViT-L-14-336 with OpenAI pretrained weights)\n   - Feature layers to extract (e.g., 5, 11, 17, 23)\n   - Image resize dimensions\n   - Batch size\n   - Aggregation degrees (r_list) for the LNAMD module\n   - Option to save results to Excel\n\n2. Create a model that:\n   - Loads a pretrained vision transformer backbone\n   - Processes test images to extract deep features\n   - Implements the LNAMD (Local Neighborhood Aggregation with Multiple Degrees) module that:\n     * Takes feature maps from the backbone\n     * Applies layer normalization\n     * Divides features into patches based on aggregation degree r\n     * Aggregates features across different scales\n\n3. Implement the MSM (Mutual Scoring Module) that:\n   - Computes anomaly scores by comparing features across images\n   - Uses a nearest neighbor approach with configurable parameters\n\n4. Implement the RsCIN (Robust Score Calibration with Image Neighborhood) module to optimize classification scores\n\n5. Calculate evaluation metrics:\n   - For anomaly classification (AC): AUROC, F1 score, AP\n   - For anomaly segmentation (AS): AUROC, F1 score, AP, AUPRO\n\n6. Support visualization of anomaly maps and saving results to Excel\n\n7. Run experiments with different aggregation degrees (r values: 1, 3, 5, and combination) on datasets with different anomaly sizes (MVTec AD with larger anomalies, VisA with smaller anomalies) to evaluate how r affects performance.\n\nThe goal is to demonstrate that smaller r values (r=1) perform better on datasets with smaller anomalies (VisA), larger r values (r=5) perform better on datasets with larger anomalies (MVTec AD), and a combination of multiple r values (râˆˆ{1,3,5}) yields the best overall results.",
  "masked_source": [
    "/workspace/examples/musc_main.py",
    "/workspace/scripts/musc.sh"
  ]
}