{
    "source": [
        "/workspace/opencood/tools/train.py",
        "/workspace/opencood/tools/heal_tools.py",
        "/workspace/opencood/tools/inference_heter_in_order.py"
    ],
    "usage_instructions": "To run the experiment for sequential integration of heterogeneous agents, follow these steps:\n\n1. First, train the L(64)P base agent (PointPillars with 64-channel LiDAR):\n   ```bash\n   mkdir -p opencood/logs/HEAL_m1_based/stage1/m1_base\n   cp opencood/hypes_yaml/opv2v/MoreModality/HEAL/stage1/m1_pyramid.yaml opencood/logs/HEAL_m1_based/stage1/m1_base/config.yaml\n   python opencood/tools/train.py -y None --model_dir opencood/logs/HEAL_m1_based/stage1/m1_base\n   ```\n\n2. After the base model is trained, prepare for sequential integration of additional agents:\n   ```bash\n   mkdir -p opencood/logs/HEAL_m1_based/stage2/m2_alignto_m1\n   mkdir -p opencood/logs/HEAL_m1_based/stage2/m3_alignto_m1\n   mkdir -p opencood/logs/HEAL_m1_based/stage2/m4_alignto_m1\n   \n   # Copy the best checkpoint from base model training\n   cp opencood/logs/HEAL_m1_based/stage1/m1_base/net_epoch_bestval_at*.pth opencood/logs/HEAL_m1_based/stage2/net_epoch1.pth\n   \n   # Create symbolic links to the checkpoint\n   ln -s opencood/logs/HEAL_m1_based/stage2/net_epoch1.pth opencood/logs/HEAL_m1_based/stage2/m2_alignto_m1\n   ln -s opencood/logs/HEAL_m1_based/stage2/net_epoch1.pth opencood/logs/HEAL_m1_based/stage2/m3_alignto_m1\n   ln -s opencood/logs/HEAL_m1_based/stage2/net_epoch1.pth opencood/logs/HEAL_m1_based/stage2/m4_alignto_m1\n   \n   # Copy configuration files for each agent type\n   cp opencood/hypes_yaml/opv2v/MoreModality/HEAL/stage2/m2_single_pyramid.yaml opencood/logs/HEAL_m1_based/stage2/m2_alignto_m1/config.yaml\n   cp opencood/hypes_yaml/opv2v/MoreModality/HEAL/stage2/m3_single_pyramid.yaml opencood/logs/HEAL_m1_based/stage2/m3_alignto_m1/config.yaml\n   cp opencood/hypes_yaml/opv2v/MoreModality/HEAL/stage2/m4_single_pyramid.yaml opencood/logs/HEAL_m1_based/stage2/m4_alignto_m1/config.yaml\n   ```\n\n3. Train each additional agent type (can be done in parallel):\n   ```bash\n   # Train C(384)E agent (camera-based with EfficientNet)\n   python opencood/tools/train.py -y None --model_dir opencood/logs/HEAL_m1_based/stage2/m2_alignto_m1\n   \n   # Train L(32)S agent (LiDAR-based with SECOND backbone)\n   python opencood/tools/train.py -y None --model_dir opencood/logs/HEAL_m1_based/stage2/m3_alignto_m1\n   \n   # Train C(336)R agent (camera-based with ResNet50)\n   python opencood/tools/train.py -y None --model_dir opencood/logs/HEAL_m1_based/stage2/m4_alignto_m1\n   ```\n\n4. Combine all trained models and evaluate the sequential integration:\n   ```bash\n   mkdir -p opencood/logs/HEAL_m1_based/final_infer/\n   cp opencood/hypes_yaml/opv2v/MoreModality/HEAL/final_infer/m1m2m3m4.yaml opencood/logs/HEAL_m1_based/final_infer/config.yaml\n   \n   # Merge all models\n   python opencood/tools/heal_tools.py merge_final \\\n     opencood/logs/HEAL_m1_based/stage2/m2_alignto_m1 \\\n     opencood/logs/HEAL_m1_based/stage2/m3_alignto_m1 \\\n     opencood/logs/HEAL_m1_based/stage2/m4_alignto_m1 \\\n     opencood/logs/HEAL_m1_based/stage1/m1_base \\\n     opencood/logs/HEAL_m1_based/final_infer\n   \n   # Run inference with sequential integration of agents\n   python opencood/tools/inference_heter_in_order.py --model_dir opencood/logs/HEAL_m1_based/final_infer\n   ```\n\nThe `inference_heter_in_order.py` script will automatically evaluate the performance with sequential integration of agents (m1 → m1+m2 → m1+m2+m3 → m1+m2+m3+m4) and report Average Precision (AP) metrics at different IoU thresholds (0.3, 0.5, 0.7)."
}