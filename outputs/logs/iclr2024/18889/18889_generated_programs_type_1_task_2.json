{
    "source": [
        "/workspace/opencood/tools/train.py",
        "/workspace/opencood/tools/heal_tools.py",
        "/workspace/opencood/tools/inference_heter_in_order.py"
    ],
    "usage_instructions": "To run the ablation study on HEAL's components using the OPV2V-H dataset, follow these steps:\n\n1. First, prepare the OPV2V-H dataset by downloading it from the Huggingface Hub as mentioned in the README.md.\n\n2. For the baseline model (without any HEAL-specific enhancements):\n   - Create a configuration file by modifying `/workspace/opencood/hypes_yaml/opv2v/MoreModality/HEAL/stage1/m1_pyramid.yaml` to disable the multiscale pyramid, foreground supervision, and backward alignment components.\n   - Run: `python opencood/tools/train.py -y /path/to/baseline_config.yaml`\n   - After training, evaluate: `python opencood/tools/inference_heter_in_order.py --model_dir /path/to/trained_model_dir`\n\n3. For the model with only multiscale pyramid module:\n   - Use the existing configuration file: `/workspace/opencood/hypes_yaml/opv2v/MoreModality/HEAL/stage1/m1_pyramid.yaml`\n   - Modify the loss section to disable foreground supervision by removing or setting the pyramid weight to 0\n   - Run: `python opencood/tools/train.py -y /path/to/pyramid_only_config.yaml`\n   - After training, evaluate: `python opencood/tools/inference_heter_in_order.py --model_dir /path/to/trained_model_dir`\n\n4. For the model with multiscale pyramid and foreground supervision:\n   - Use the existing configuration file: `/workspace/opencood/hypes_yaml/opv2v/MoreModality/HEAL/stage1/m1_pyramid.yaml` with default settings\n   - Run: `python opencood/tools/train.py -y /workspace/opencood/hypes_yaml/opv2v/MoreModality/HEAL/stage1/m1_pyramid.yaml`\n   - After training, evaluate: `python opencood/tools/inference_heter_in_order.py --model_dir /path/to/trained_model_dir`\n\n5. For the complete HEAL model (with backward alignment):\n   - First train the collaboration base with multiscale pyramid and foreground supervision:\n     `python opencood/tools/train.py -y /workspace/opencood/hypes_yaml/opv2v/MoreModality/HEAL/stage1/m1_pyramid.yaml`\n   - Then train the other agent types (m2, m3, m4) using the stage2 configs:\n     `python opencood/tools/train.py -y /workspace/opencood/hypes_yaml/opv2v/MoreModality/HEAL/stage2/m2_single_pyramid.yaml`\n     `python opencood/tools/train.py -y /workspace/opencood/hypes_yaml/opv2v/MoreModality/HEAL/stage2/m3_single_pyramid.yaml`\n     `python opencood/tools/train.py -y /workspace/opencood/hypes_yaml/opv2v/MoreModality/HEAL/stage2/m4_single_pyramid.yaml`\n   - Merge the models using heal_tools.py:\n     `python opencood/tools/heal_tools.py merge_final /path/to/m2_model /path/to/m3_model /path/to/m4_model /path/to/m1_model /path/to/output_dir`\n   - Evaluate the final model:\n     `python opencood/tools/inference_heter_in_order.py --model_dir /path/to/output_dir`\n\nFor each step, make sure to use the same fixed agent type configuration (e.g., one L(64) LiDAR-equipped agent combined with other agents providing C(384), E+L(32), and S+C(336) inputs) as specified in the OPV2V-H dataset. The AP50 and AP70 metrics will be reported after each evaluation run."
}