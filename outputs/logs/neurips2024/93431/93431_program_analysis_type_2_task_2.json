{
  "requirements": [
    "Step 1: Import the necessary modules from the Trace framework (opto.trace) (/workspace/docs/quickstart/quick_start.ipynb:170-171)",
    "Step 2: Define a function decorated with @bundle(trainable=True) that implements the strange sort algorithm (/workspace/docs/quickstart/quick_start.ipynb:172-185)",
    "Step 3: Create test cases with input lists and expected outputs for the strange sort algorithm (/workspace/docs/quickstart/quick_start.ipynb:379-380)",
    "Step 4: Define a feedback function that evaluates if the function's output matches the expected result (/workspace/docs/quickstart/quick_start.ipynb:338-342)",
    "Step 5: Import and initialize an optimizer (OptoPrime) with the function's parameters (/workspace/docs/quickstart/quick_start.ipynb:376-384)",
    "Step 6: Set up an optimization loop that runs for multiple epochs (/workspace/docs/quickstart/quick_start.ipynb:386-402)",
    "Step 7: In each epoch, execute the function with test inputs and compare outputs to expected results (/workspace/docs/quickstart/quick_start.ipynb:388-395)",
    "Step 8: Provide feedback to the optimizer based on the correctness of the output (/workspace/docs/quickstart/quick_start.ipynb:400-402)",
    "Step 9: Break the loop if the function produces correct outputs (/workspace/docs/quickstart/quick_start.ipynb:397-398)",
    "Final Step: Verify the optimized function works correctly on test cases like [1, 2, 3, 4] â†’ [1, 4, 2, 3] (/workspace/docs/quickstart/quick_start.ipynb:621-623)"
  ],
  "agent_instructions": "Your task is to implement a 'strange sort' algorithm using the Trace framework for optimization. The strange sort algorithm takes a list of integers and returns a new list where elements are arranged by alternating between selecting the minimum and maximum values from the remaining elements.\n\nFollow these steps:\n\n1. Install the Trace framework (trace-opt)\n\n2. Create a Python function that attempts to implement the strange sort algorithm. The function should:\n   - Take a list of integers as input\n   - Return a list where elements are arranged by alternating between minimum and maximum values\n   - For example, [1, 2, 3, 4] should become [1, 4, 2, 3]\n   - Decorate this function with @bundle(trainable=True) from the Trace framework\n\n3. Create test cases to verify the function's behavior, such as:\n   - Input [1, 2, 3, 4] should produce [1, 4, 2, 3]\n   - Input [5, 5, 5, 5] should produce [5, 5, 5, 5]\n   - Input [] should produce []\n\n4. Implement a feedback function that evaluates if the function's output matches the expected result\n\n5. Set up an optimization loop using OptoPrime from the Trace framework to improve the function implementation:\n   - Initialize the optimizer with the function's parameters\n   - Run the function with test inputs\n   - Provide feedback based on correctness\n   - Allow the optimizer to update the function\n   - Continue until the function produces correct outputs\n\n6. Verify the optimized function works correctly on various test cases\n\nThe final implementation should correctly implement the strange sort algorithm by alternating between selecting minimum and maximum values from the remaining elements in the list."
}