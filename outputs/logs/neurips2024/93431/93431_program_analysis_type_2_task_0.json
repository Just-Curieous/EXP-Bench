{
  "requirements": [
    "Step 1: Import necessary modules from the Trace framework (opto.trace) and optimizer (opto.optimizers) (/workspace/examples/greeting.py:1-3)",
    "Step 2: Create a model class for the sales agent using the trace.model decorator (/workspace/examples/greeting.py:6-7)",
    "Step 3: Initialize the agent with a system prompt and create trainable nodes for language detection and name extraction (/workspace/examples/greeting.py:9-12)",
    "Step 4: Implement the main call method that processes user input through the language detection and name extraction nodes (/workspace/examples/greeting.py:14-23)",
    "Step 5: Create a trainable bundle method to determine the language of the input (en or es) (/workspace/examples/greeting.py:25-28, 86-89)",
    "Step 6: Create a trainable bundle method to generate appropriate greetings based on the detected language (/workspace/examples/greeting.py:30-34, 91-95)",
    "Step 7: Implement a feedback function that evaluates if the greeting matches the expected language (/workspace/examples/greeting.py:37-43)",
    "Step 8: Create a training function that initializes the agent and optimizer (/workspace/examples/greeting.py:46-49)",
    "Step 9: Set up a training loop that tests the agent with Spanish input and uses feedback to improve responses (/workspace/examples/greeting.py:51-65)",
    "Final Step: Return the trained agent (/workspace/examples/greeting.py:67)"
  ],
  "agent_instructions": "Create a language-adaptive sales agent using the Trace framework that can detect Spanish input and respond with 'Hola' instead of 'Hello'. Your implementation should follow these steps:\n\n1. Import the necessary modules from the Trace framework (opto.trace) and optimizer (opto.optimizers).\n\n2. Create a model class for a sales assistant agent using the trace.model decorator.\n\n3. Initialize the agent with a system prompt (e.g., 'You are a sales assistant') and create trainable nodes for:\n   - Language detection (to determine if input is English or Spanish)\n   - Name extraction (to extract the user's name from the input)\n\n4. Implement the main call method that processes user input by:\n   - Using the language detection node to determine the language\n   - Using the name extraction node to extract the user's name\n   - Generating an appropriate greeting based on the detected language and name\n\n5. Create trainable methods to:\n   - Determine if the input language is English or Spanish\n   - Generate the appropriate greeting ('Hello' or 'Hola') based on the detected language\n\n6. Implement a feedback function that evaluates if the greeting matches the expected language (returns 'Correct' or 'Incorrect').\n\n7. Create a training function that:\n   - Initializes the agent and optimizer (OptoPrime)\n   - Sets up a training loop that tests the agent with Spanish input\n   - Uses feedback to improve the agent's responses\n   - Continues training until the agent correctly responds with 'Hola' to Spanish input\n\n8. Test the agent with Spanish input (e.g., 'Hola, soy Juan.') to verify it responds with 'Hola, Juan!' instead of 'Hello, Juan!'\n\nThe goal is to create an agent that can adapt to different languages and respond appropriately based on the input language."
}