{
  "requirements": [
    "Step 1: Define a configuration class with parameters for the CycleNet model including sequence length, prediction length, cycle length, model type, and other hyperparameters (models/CycleNet.py:21-31)",
    "Step 2: Implement the RecurrentCycle class that models periodic patterns in time series data (models/CycleNet.py:4-18)",
    "Step 3: Implement the main CycleNet model that uses the RecurrentCycle component to capture and remove cyclic patterns from the data (models/CycleNet.py:21-67)",
    "Step 4: Create a data loader that processes time series data and provides cycle indices for training (data_provider/data_loader.py:14-305)",
    "Step 5: Implement the training loop that trains the CycleNet model on synthetic or real time series data (exp/exp_main.py:115-244)",
    "Step 6: Implement the testing/evaluation function to assess model performance (exp/exp_main.py:246-348)",
    "Step 7: Visualize the learned cyclic patterns and forecasting results (visualization.ipynb)"
  ],
  "agent_instructions": "Your task is to implement and train a CycleNet model for time series forecasting with periodic patterns. CycleNet is a model that explicitly models and leverages cyclical patterns in time series data to improve forecasting accuracy.\n\nFollow these steps:\n\n1. Create a configuration class that defines the model parameters:\n   - Sequence length (input window size)\n   - Prediction length (forecast horizon)\n   - Cycle length (periodicity of the data)\n   - Model type (linear or MLP)\n   - Input and output dimensions\n   - Whether to use instance normalization (RevIN)\n\n2. Implement the RecurrentCycle class:\n   - This class should maintain a learnable parameter representing the cyclic pattern\n   - It should be able to extract the appropriate cycle values for any given time index\n\n3. Implement the main CycleNet model:\n   - Create a model that takes time series data and cycle indices as input\n   - Remove the cyclic component from the input data\n   - Apply a forecasting model (linear or MLP) to the residual\n   - Add back the cyclic component to the forecast\n   - Include optional instance normalization for better performance\n\n4. Create a data processing pipeline:\n   - Load time series data (you can generate synthetic data with known periodicity)\n   - Normalize the data appropriately\n   - Create training, validation, and test splits\n   - Ensure the data loader provides both the time series values and the cycle indices\n\n5. Implement the training loop:\n   - Train the model using MSE loss\n   - Monitor validation performance\n   - Implement early stopping\n   - Save the best model checkpoint\n\n6. Evaluate the model:\n   - Test the model on held-out data\n   - Calculate and report error metrics (MSE, MAE)\n   - Compare with baseline models if desired\n\n7. Visualize the results:\n   - Plot the historical data, ground truth, and predictions\n   - Visualize the learned cyclic patterns\n   - Analyze how well the model captures the periodicity in the data\n\nThe key insight of CycleNet is that it explicitly models the cyclic patterns in time series data, which allows it to better forecast future values by separating the periodic component from the residual trend. This approach is particularly effective for data with strong seasonal or periodic patterns."
}