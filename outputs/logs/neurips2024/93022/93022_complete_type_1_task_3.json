{
  "questions": [
    {
      "question": "Does the MDGEN model generate transition paths that are statistically more consistent with the reference  Markov State Model (MSM) than transition paths sampled from replicate MD-derived MSMs of shorter durations?",
      "method": "#### Problem Setup\n\n- Evaluate the quality of transition paths generated by MDGEN (via zero-shot interpolation) against those derived from MSMs trained on shorter MD simulations, using the reference MSM built from a 100 ns trajectory as ground truth.\n\n#### Independent Variables\n\n- **Transition Path Generation Method**:\n  - MDGEN: 1 ns rollouts conditioned on start/end frames\n  - MSMs from MD trajectories of shorter durations: 50 ns, 30 ns, 20 ns, 10 ns, etc.\n\n#### Dependent Variables (Evaluation Metrics)\n\n- **Path Likelihood** under the reference MSM\n- **Fraction of Valid Paths** (non-zero transition probability)\n- **Jensen-Shannon Divergence (JSD)** between visited state distributions and the reference\n\n#### Experiment Setup\n\n- **Reference Setup**:\n  - Construct a **reference MSM** from 100 ns MD simulations.\n  - Define **10 metastable states** using this MSM.\n  - Identify, for each peptide, the two most well-separated states (based on lowest flux).\n- **Trajectory Generation and Discretization**:\n  - For each peptide, generate **1 ns (100-frame)** interpolated trajectories using MDGEN, conditioned on the first and last frame of the identified transition.\n  - Sample **1000 transition paths** per peptide.\n  - Discretize all trajectories into the 10 metastable states.\n- **Metric Computation**:\n  1. **Path Likelihood**: Average probability of transitioning between start and end states under the reference MSM.\n  2. **Valid Paths Fraction**: % of paths with non-zero probability (invalid if start/end never visited by MSM).\n  3. **JSD**: Divergence between categorical distribution of states visited in sampled paths vs. reference.\n- **Baseline**:\n  - Repeat the above steps using transition paths sampled from MSMs trained on replicate MD simulations of shorter durations (10\u201350 ns).\n  - Use identical metrics and discretization.\n- **Analysis**:\n  - Aggregate all metrics over **100 test tetrapeptides**.\n  - Visualize comparisons using plots similar to Figure 3 (likelihood, validity, JSD).\n  - Reference Tables 2 and 4 for runtime and baseline context.",
      "expected_outcome": "**MDGEN paths** are expected to:\n\n- Show **higher average likelihoods** under the reference MSM.\n- Have a **greater fraction of valid paths** (non-zero transition probability).\n- Yield **lower JSD values** in state distribution comparisons.\n\nThis performance should **consistently surpass that of MSMs built on shorter MD durations**, demonstrating that MDGEN effectively models rare transitions with zero-shot generalization.",
      "design_complexity": {
        "constant_variables": {
          "reference_MSM": "Built from a 100 ns MD simulation with 10 metastable states using a fixed clustering/discretization procedure",
          "trajectory_discretization": "All trajectories (both MDGEN and MSM baseline) are discretized into the same 10 state metastable representation",
          "test_peptides": "Evaluation is carried out over 100 test tetrapeptides"
        },
        "independent_variables": {
          "transition_path_generation_method": [
            "MDGEN: 1 ns rollouts conditioned on start and end frames (interpolated trajectories)",
            "MSM-based methods: Transition paths sampled from replicate MD-derived MSMs corresponding to shorter simulation durations (e.g., 50 ns, 30 ns, 20 ns, 10 ns)"
          ]
        },
        "dependent_variables": {
          "evaluation_metrics": [
            "Path Likelihood under the reference MSM",
            "Fraction of Valid Paths (non-zero transition probability)",
            "Jensen-Shannon Divergence (JSD) between state visitation distributions and the reference MSM"
          ]
        }
      },
      "design_ambiguity": {
        "ambiguous_variables": {
          "replicate_MSM_durations": "Exact durations and the full range of shorter MD simulations beyond the provided examples (50 ns, 30 ns, 20 ns, 10 ns, etc.) are not exhaustively specified",
          "metastable_state_selection": "The method for identifying the two most well-separated states per peptide (based on lowest flux) could be subject to interpretation without detailed procedural description"
        },
        "possible_modifications": {
          "duration_range_modification": [
            "Specify additional or alternative MD simulation durations for baseline MSMs",
            "Provide explicit criteria for why certain durations are selected"
          ],
          "evaluation_metric_extension": [
            "Include additional metrics (e.g., dynamical fidelity, sampling efficiency) to further characterize transition paths"
          ]
        }
      },
      "experiment_setup_complexity": {
        "components": [
          "Reference MSM built from 100 ns MD simulation",
          "MSMs from shorter MD-derived simulations (e.g., 10 ns, 20 ns, 30 ns, 50 ns)",
          "MDGEN model for zero-shot trajectory interpolation",
          "Trajectory discretization module into 10 metastable states",
          "Evaluation metrics computation (Path Likelihood, Fraction of Valid Paths, Jensen-Shannon Divergence)",
          "Test peptides (100 test tetrapeptides)",
          "Visualization components (plots similar to Figure 3)",
          "Runtime context (referenced in Tables 2 and 4)"
        ],
        "setup_steps": [
          "Construct the reference MSM using a 100 ns MD simulation",
          "Define 10 metastable states via a fixed clustering/discretization procedure",
          "Identify for each peptide the two most well-separated states based on lowest flux",
          "Generate 1 ns MDGEN interpolated trajectories conditioned on selected start and end states",
          "Sample 1000 transition paths per peptide",
          "Discretize all trajectories into the 10 metastable states",
          "Compute evaluation metrics: average path likelihood under the reference MSM, fraction of valid paths, and JSD between state distributions",
          "Repeat the above process for baseline MSMs built on replicate MD simulations of shorter durations",
          "Aggregate metrics over 100 test tetrapeptides and visualize comparisons using plots similar to Figure 3"
        ],
        "optional_other_sources_of_complexity": [
          {
            "source": "Interconnection of components",
            "description": "Combining MDGEN with baseline MSM methods requires integrating different trajectory generation and discretization pipelines along with multiple evaluation metrics."
          },
          {
            "source": "External references",
            "description": "Reference to external tables (Tables 2 and 4) and figures (Figure 3) adds complexity, as these provide context on runtime and visualization details without full description in the main text."
          }
        ]
      },
      "experiment_setup_ambiguity": {
        "ambiguous_components": [
          "Replicate MSM durations for baseline methods",
          "Criteria for selecting the two most well-separated metastable states"
        ],
        "ambiguous_setup_steps": [
          "The exact range and full list of durations for the shorter MD simulations is not exhaustively specified beyond the examples (10 ns, 20 ns, 30 ns, 50 ns)",
          "The method to identify the two most well-separated metastable states (e.g., precise metric for 'lowest flux') is not described in detail"
        ],
        "possible_modifications": {
          "duration_range_modification": [
            "Specify additional or alternative MD simulation durations and provide clear criteria for selecting them"
          ],
          "metastable_state_selection_detail": [
            "Include a detailed algorithm or explicit criteria and threshold values for identifying the two most well-separated metastable states based on flux"
          ],
          "evaluation_metric_extension": [
            "Consider adding further metrics (e.g., dynamical fidelity, sampling efficiency) to enhance the evaluation of transition paths"
          ]
        }
      },
      "experiment_constraints": {
        "resource_constraints": {},
        "time_constraints": {},
        "money_constraints": {},
        "possible_modifications": {
          "resource_constraints": [
            "For extended tasks, restrict the available GPU resources (for example, use NVIDIA T4 GPUs instead of higher-end GPUs like A100 or A6000) to test whether MDGEN retains its advantages under limited compute power."
          ],
          "time_constraints": [
            "Tighten the simulation duration by requiring the reference MSM to be built from a shorter MD simulation (for instance, 50 ns instead of 100 ns) to evaluate whether MDGEN can still generate statistically consistent transition paths within a reduced time budget."
          ],
          "money_constraints": [
            "Constrain the experiment by limiting the access to high-performance compute clusters, instead relying on more economical cloud-based or local hardware solutions."
          ]
        }
      },
      "random_uncertainty": {
        "source": "Stochastic sampling in trajectory generation and discretization",
        "description": "Random uncertainty is introduced by the inherent stochasticity in generating 1 ns MDGEN interpolated trajectories, sampling 1000 transition paths per peptide, and the random initialization processes within the MDGEN model. This variability can cause fluctuations in the computed evaluation metrics such as path likelihood, valid paths fraction, and Jensen-Shannon Divergence.",
        "impact": "Such random fluctuations can lead to variations in metric values across different experimental runs, potentially affecting the reliability of performance comparisons between MDGEN and the MSM-based baselines.",
        "possible_modifications": [
          "Implement fixed random seeds to reduce stochastic variability and improve reproducibility.",
          "Conduct multiple independent runs and report error bars (e.g., standard deviation or confidence intervals) to quantify random uncertainty in the results."
        ]
      },
      "systematic_uncertainty": {
        "source": "Ambiguities in metastable state selection and baseline MSM duration choices",
        "description": "Systematic uncertainty arises from the potential bias introduced by the method used for selecting the two most well-separated metastable states per peptide (based on lowest flux) and the fixed choice of MD simulation durations (e.g., 100 ns for reference and 10\u201350 ns for baselines). These choices might systematically influence the evaluation metrics, as they could favor one method over another.",
        "impact": "This systematic bias could consistently skew the comparison between MDGEN and the MSM baselines, leading to conclusions that reflect the design decisions rather than the true performance differences.",
        "possible_modifications": [
          "Detail and standardize the algorithm for metastable state selection, including explicit threshold values and criteria, to remove subjective bias.",
          "Expand or modify the range of MD simulation durations used for the baseline MSMs to ensure a more balanced and comprehensive evaluation of transition paths."
        ]
      },
      "source": [
        "/workspace/tps_inference.py",
        "/workspace/scripts/analyze_peptide_tps.py"
      ],
      "usage_instructions": "1. First, run the transition path sampling inference script to generate MDGEN transition paths: `python tps_inference.py --sim_ckpt interpolation.ckpt --data_dir data/4AA_data --split splits/4AA_test.csv --num_frames 100 --suffix _i100 --mddir data/4AA_sims --out_dir [OUTPUT_DIRECTORY]`\n\n2. Then, analyze the generated paths against the reference MSM and shorter duration MSMs: `python -m scripts.analyze_peptide_tps --mddir data/4AA_sims --repdir data/4AA_sims_replica --pdbdir [OUTPUT_DIRECTORY] --outdir [ANALYSIS_DIRECTORY] --plot --save`\n\nThe analysis script computes all the required metrics: path likelihood under the reference MSM, fraction of valid paths (non-zero transition probability), and Jensen-Shannon Divergence (JSD) between visited state distributions. It compares MDGEN paths against MSMs built from shorter MD simulations (50ns, 30ns, 20ns, 10ns, 5ns, 2ns) as specified in the experiment question.",
      "requirements": [
        "Step 1: Load a pre-trained MDGEN model from checkpoint (/workspace/tps_inference.py:155-156)",
        "Step 2: Load peptide data from a CSV file containing peptide names and sequences (/workspace/tps_inference.py:157-158)",
        "Step 3: For each peptide, load molecular dynamics trajectory data and build a Markov State Model (MSM) (/workspace/tps_inference.py:92-100)",
        "Step 4: Identify start and end states with minimum flux between them in the MSM (/workspace/tps_inference.py:110-118)",
        "Step 5: Generate transition path samples between identified start and end states using the MDGEN model (/workspace/tps_inference.py:123-136)",
        "Step 6: Save generated transition paths as PDB and XTC files along with metadata (/workspace/tps_inference.py:138-150)",
        "Step 7: Load generated transition paths and reference data for analysis (/workspace/scripts/analyze_peptide_tps.py:35-46)",
        "Step 8: Discretize generated trajectories using the reference MSM (/workspace/scripts/analyze_peptide_tps.py:72-75)",
        "Step 9: Calculate transition path likelihood under the reference MSM (/workspace/scripts/analyze_peptide_tps.py:77-82)",
        "Step 10: Calculate Jensen-Shannon Divergence between generated and reference state distributions (/workspace/scripts/analyze_peptide_tps.py:83)",
        "Step 11: Perform the same analysis for MSMs built from shorter MD simulations (50ns, 30ns, 20ns, 10ns, 5ns, 2ns) (/workspace/scripts/analyze_peptide_tps.py:87-131)",
        "Step 12: Generate visualization plots comparing all results (/workspace/scripts/analyze_peptide_tps.py:49-164)",
        "Final Step: Save analysis results and plots (/workspace/scripts/analyze_peptide_tps.py:165-192)"
      ],
      "agent_instructions": "Your task is to implement a system for evaluating protein transition path sampling using machine learning models. The system consists of two main components:\n\n1. A transition path sampling inference script that:\n   - Takes a pre-trained MDGEN model checkpoint as input\n   - Processes peptide data from a specified dataset\n   - For each peptide, builds a Markov State Model (MSM) from reference molecular dynamics data\n   - Identifies meaningful start and end states with minimum flux between them\n   - Generates transition paths between these states using the model\n   - Saves the generated paths as molecular structure files with metadata\n\n2. An analysis script that:\n   - Evaluates the quality of generated transition paths against reference data\n   - Computes key metrics including:\n     - Path likelihood under the reference MSM\n     - Fraction of valid paths (non-zero transition probability)\n     - Jensen-Shannon Divergence between visited state distributions\n   - Compares generated paths against MSMs built from shorter MD simulations (50ns, 30ns, 20ns, 10ns, 5ns, 2ns)\n   - Generates visualizations of the results\n\nThe system should use PyEMMA for Markov modeling and MDTraj for trajectory manipulation. The goal is to evaluate how well machine learning models can generate realistic transition paths between protein conformational states compared to traditional molecular dynamics simulations of varying lengths.",
      "masked_source": [
        "/workspace/tps_inference.py",
        "/workspace/scripts/analyze_peptide_tps.py"
      ]
    }
  ]
}