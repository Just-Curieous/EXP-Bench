{
  "requirements": [
    "Step 1: Load and cross-match two datasets (DESI spectra and Legacy Surveys images) using astronomical coordinates with a specified matching radius (/workspace/experimental_benchmark/cross_match.py:7-34)",
    "Step 2: Set up a supervised learning pipeline for galaxy property estimation from images using an EfficientNetB0 model (/workspace/experimental_benchmark/galaxy_properties/model.py:117-137)",
    "Step 3: Set up a supervised learning pipeline for galaxy property estimation from spectra using a ResNet18 model (/workspace/experimental_benchmark/galaxy_properties/model.py:271-287)",
    "Step 4: Create a dataset class that handles loading and preprocessing of galaxy data (images, spectra, or photometry) and their associated properties (/workspace/experimental_benchmark/galaxy_properties/dataset.py:8-103)",
    "Step 5: Train the supervised models using PyTorch Lightning CLI with the appropriate configuration files (/workspace/experimental_benchmark/galaxy_properties/trainer.py:3-10)",
    "Step 6: Load a pre-trained AstroCLIP model and use it to generate embeddings for both images and spectra (/workspace/experimental_benchmark/astroclip/property_estimation/embed.py:15-107)",
    "Step 7: Create a dataloader for the AstroCLIP model that handles loading and preprocessing of multimodal astronomical data (/workspace/experimental_benchmark/astroclip/property_estimation/datamodule.py:13-50)",
    "Step 8: Implement a collator class that processes images and spectra for the AstroCLIP model (/workspace/experimental_benchmark/astroclip/property_estimation/datamodule.py:53-80)",
    "Step 9: Load the generated embeddings and set up a k-NN regressor with k=16 and distance weighting (/workspace/experimental_benchmark/astroclip/property_estimation/property_estimation.ipynb:8-36)",
    "Step 10: Evaluate the k-NN regressor on image embeddings and calculate R² scores for each galaxy property (/workspace/experimental_benchmark/astroclip/property_estimation/property_estimation.ipynb:67-76)",
    "Step 11: Evaluate the k-NN regressor on spectrum embeddings and calculate R² scores for each galaxy property (/workspace/experimental_benchmark/astroclip/property_estimation/property_estimation.ipynb:109-118)",
    "Final Step: Compare the performance of the supervised approach and the zero-shot AstroCLIP approach for galaxy property estimation (/workspace/experimental_benchmark/astroclip/property_estimation/property_estimation.ipynb:42-118)"
  ],
  "agent_instructions": "You need to implement a pipeline for galaxy property estimation using both traditional supervised learning and a zero-shot approach with embeddings. The pipeline consists of several components:\n\n1. First, create a script to cross-match astronomical datasets between DESI spectra and Legacy Surveys images. The script should:\n   - Take input paths for both datasets and an output path\n   - Allow specifying a matching radius in arcseconds\n   - Use astronomical coordinates (RA/Dec) to match objects between datasets\n   - Save the cross-matched dataset to disk\n\n2. For the supervised learning approach:\n   - Implement a trainer script that uses PyTorch Lightning CLI\n   - Create model implementations for both image-based and spectrum-based property estimation\n   - The image model should be based on EfficientNetB0 architecture\n   - The spectrum model should be based on ResNet18 architecture\n   - Implement a dataset class that handles loading and preprocessing galaxy data\n   - The models should predict 5 galaxy properties: stellar mass, specific star formation rate, metallicity, redshift, and age\n\n3. For the zero-shot approach with AstroCLIP:\n   - Create a script to generate embeddings from a pre-trained AstroCLIP model\n   - The script should process both images and spectra from the cross-matched dataset\n   - Implement a dataloader and collator for processing astronomical data\n   - Save the embeddings along with the ground truth properties\n\n4. Finally, create a notebook to evaluate both approaches:\n   - Load the embeddings generated by AstroCLIP\n   - Implement k-NN regression with k=16 and distance weighting\n   - Evaluate the performance on both image and spectrum embeddings\n   - Calculate and compare R² scores for each galaxy property\n\nThe goal is to compare how well the supervised approach and the zero-shot embedding approach perform for estimating galaxy properties from multimodal astronomical data.",
  "masked_source": [
    "/workspace/experimental_benchmark/cross_match.py",
    "/workspace/experimental_benchmark/galaxy_properties/trainer.py",
    "/workspace/experimental_benchmark/astroclip/property_estimation/embed.py",
    "/workspace/experimental_benchmark/astroclip/property_estimation/property_estimation.ipynb",
    "/workspace/experimental_benchmark/galaxy_properties/dataset.py",
    "/workspace/experimental_benchmark/galaxy_properties/model.py",
    "/workspace/experimental_benchmark/astroclip/property_estimation/datamodule.py",
    "/workspace/mmu/utils.py"
  ]
}