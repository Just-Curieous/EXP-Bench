[
  {
    "mode": "B",
    "question": "How can we visualize and analyze astronomical light curves from the PLAsTiCC dataset?",
    "method": "Create a program that loads the PLAsTiCC dataset from the Multimodal Universe collection, processes the light curve data to remove padding, and visualizes the light curves for different astronomical objects with proper error bars and band colors.",
    "expected_outcome": "A visualization of a PLAsTiCC light curve showing flux measurements over time across different bands, with proper error bars, and information about the object type and redshift displayed.",
    "source": [
      "/workspace/notebooks/plasticc_demo.ipynb",
      "/workspace/notebooks/getting_started.ipynb"
    ],
    "usage_instructions": "1. Install and import the necessary libraries (datasets, numpy, matplotlib).\n2. Load the PLAsTiCC dataset using the Hugging Face datasets library with streaming enabled.\n3. Extract a light curve example from the dataset.\n4. Process the light curve data by:\n   - Identifying unique bands in the data\n   - Determining the sequence length for each band\n   - Finding non-padding timestamps to determine the unpadded sequence length\n   - Reshaping the time, flux, and flux error data to remove padding\n5. Create a visualization of the light curve with:\n   - Different colors for each band\n   - Error bars for flux measurements\n   - Proper axis labels and title\n   - A legend identifying each band\n6. Display metadata about the object including its ID, type, and redshift information."
  },
  {
    "mode": "A",
    "question": "How can we classify supernovae types using wavelet features extracted from light curves?",
    "method": "Use the snmachine library to extract wavelet features from supernova light curves and train a classifier to distinguish between different supernova types (Ia, II, Ibc, etc.).",
    "expected_outcome": "A trained classifier that can distinguish between different supernova types with accuracy metrics and visualizations (confusion matrix, ROC curve, t-SNE plot).",
    "source": [
      "/workspace/baselines/photo_class/snmachine_example.py"
    ],
    "usage_instructions": "1. Load a dataset of supernova light curves from the Multimodal Universe collection.\n2. Clean and preprocess the light curve data by:\n   - Removing padding (zero values)\n   - Clipping the light curves around the peak brightness\n   - Normalizing the time axis\n   - Standardizing filter names\n3. Extract wavelet features from the light curves using the WaveletFeatures class from snmachine.\n4. Visualize the feature space using t-SNE to see how well different supernova types separate.\n5. Train multiple classifiers (SVM, Random Forest, Boosted Decision Trees) on the wavelet features.\n6. Evaluate the classifiers using accuracy metrics and confusion matrices.\n7. Plot ROC curves to visualize classifier performance."
  },
  {
    "mode": "A",
    "question": "How can we use the Informer model to classify astronomical time series data from the PLAsTiCC dataset?",
    "method": "Implement a sequence classification pipeline using the Informer model architecture to classify astronomical objects based on their light curves from the PLAsTiCC dataset.",
    "expected_outcome": "A trained Informer model that can classify astronomical objects from their light curves with accuracy metrics reported.",
    "source": [
      "/workspace/baselines/plasticc/plasticc.py",
      "/workspace/baselines/plasticc/preprocess.py",
      "/workspace/baselines/plasticc/models.py"
    ],
    "usage_instructions": "1. Load the PLAsTiCC dataset using the Hugging Face datasets library.\n2. Preprocess the light curve data by:\n   - Normalizing flux values using min-max normalization\n   - Creating attention masks to handle padding in the sequences\n   - Preparing time and wavelength features\n3. Configure the Informer model with appropriate parameters for sequence classification:\n   - Set input size, context length, and model dimensions\n   - Configure encoder and decoder layers\n   - Set up dropout and other hyperparameters\n4. Create a custom positional encoding using Fourier features for the time and wavelength dimensions.\n5. Implement the sequence classification model by:\n   - Processing the input data through the encoder\n   - Pooling the output sequence by taking the mean across the time dimension\n   - Passing the pooled representation through a classifier head\n6. Train the model on the preprocessed data.\n7. Evaluate the model's classification accuracy on a validation set."
  }
]