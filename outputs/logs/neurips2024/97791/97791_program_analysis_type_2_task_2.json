{
  "requirements": [
    "Step 1: Load the PLAsTiCC dataset using the Hugging Face datasets library (/workspace/baselines/plasticc/plasticc.py:52-52)",
    "Step 2: Preprocess the light curve data by normalizing flux values using min-max normalization (/workspace/baselines/plasticc/preprocess.py:20-24, /workspace/baselines/plasticc/preprocess.py:26-32)",
    "Step 3: Create attention masks to handle padding in the sequences (/workspace/baselines/plasticc/preprocess.py:34-38)",
    "Step 4: Transform the raw data by applying normalization and creating attention masks (/workspace/baselines/plasticc/preprocess.py:77-88, /workspace/baselines/plasticc/preprocess.py:90-115)",
    "Step 5: Configure the Informer model with appropriate parameters for sequence classification (/workspace/baselines/plasticc/plasticc.py:20-37)",
    "Step 6: Implement a custom positional encoding using Fourier features for time and wavelength dimensions (/workspace/baselines/plasticc/models.py:18-56)",
    "Step 7: Extend the Informer encoder to use the custom Fourier positional encoding (/workspace/baselines/plasticc/models.py:58-200)",
    "Step 8: Implement the sequence classification model by processing input through the encoder and pooling the output sequence (/workspace/baselines/plasticc/models.py:202-318)",
    "Step 9: Create a data loader for the preprocessed data (/workspace/baselines/plasticc/preprocess.py:117-151)",
    "Step 10: Load a pretrained model for evaluation (/workspace/baselines/plasticc/plasticc.py:46-50)",
    "Step 11: Evaluate the model's classification accuracy on a validation set (/workspace/baselines/plasticc/plasticc.py:60-66)"
  ],
  "agent_instructions": "Your task is to implement a sequence classification pipeline using the Informer model architecture to classify astronomical objects from the PLAsTiCC dataset based on their light curves. Follow these steps:\n\n1. Set up the environment by importing necessary libraries including PyTorch, transformers (for the Informer model), and the datasets library to load the PLAsTiCC dataset.\n\n2. Implement preprocessing functions for the light curve data that:\n   - Apply min-max normalization to flux values to scale them to [0,1] range\n   - Create attention masks to handle padding in the sequences\n   - Prepare time and wavelength features from the astronomical data\n\n3. Implement a custom positional encoding module using Fourier features that can encode both time and wavelength dimensions of the astronomical data.\n\n4. Extend the Informer encoder to use your custom positional encoding instead of the default one.\n\n5. Implement a sequence classification model based on the Informer architecture that:\n   - Processes the input light curve data through the encoder\n   - Pools the output sequence by taking the mean across the time dimension\n   - Passes the pooled representation through a classifier head\n\n6. Create a configuration for the Informer model with appropriate parameters:\n   - Set input size to handle flux and flux error values\n   - Configure context length to handle the light curve sequences\n   - Set appropriate model dimensions and number of encoder/decoder layers\n\n7. Implement a data loading pipeline that:\n   - Loads the PLAsTiCC dataset\n   - Applies your preprocessing functions\n   - Creates batches with proper attention masks\n\n8. Implement an evaluation function that:\n   - Loads a trained model\n   - Runs inference on a validation set\n   - Calculates and reports classification accuracy\n\nThe goal is to create a complete pipeline that can effectively classify astronomical objects from their light curves using the Informer model architecture."
}