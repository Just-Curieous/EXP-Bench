{
  "questions": [
    {
      "question": "- **Does increasing context length lead to a measurable degradation in model performance across retrieval, counting, and reasoning tasks?**\n\n\n- **Does increasing context length lead to a measurable degradation in model performance across retrieval, counting, and reasoning tasks?**",
      "method": "Collect evaluation data by grouping the multimodal documents into several context length bins (e.g., 1K\u20132K, 2K\u20134K, up to 64K tokens). For each bin, measure model performance (accuracy for retrieval and reasoning; soft accuracy for counting) on the same set of questions. Analyze the trend by comparing performance metrics across the bins for each model and task. Include statistical significance tests to verify whether longer contexts consistently result in worse performance, as suggested by the heatmap trends in Fig. 3.\n  \n1. **Task Setup:**  \n   - **Goal:** Compare Trace and TextGrad for AI workflow optimization.  \n   - **Key Difference Between Methods:**  \n     - **Trace propagates minimal subgraphs** to separate tracing infrastructure from optimization algorithms.  \n     - **TextGrad propagates text feedback**, tightly coupling infrastructure and optimization.   \n\n2. **Experimental Design for Fair Comparison:**  \n   - Applied **Trace directly to the evaluation code released with the TextGrad library**.  \n   - Both frameworks used the **same LLM APIs at around the same time** to ensure fairness.  \n   - **Optimization Tasks Compared:**  \n     - **Solution Optimization** (TextGrad Table 2).  \n     - **Prompt Optimization** (TextGrad Table 3).  \n\n3. **Comparative Evaluation:**  \n   - **OptoPrime (Trace\u2019s optimizer)**  \n   - **TextGrad (original implementation)**",
      "expected_outcome": "It is expected that performance will steadily degrade as the context length increases, particularly for tasks requiring high-level reasoning and counting. The decline should be observable in all models, with some models exhibiting a collapse (e.g., generating gibberish) when the context is extremely long.\n  \n- **OptoPrime should be approximately 3x faster than TextGrad**, since:  \n  - OptoPrime makes **one LLM call per optimization step**.  \n  - TextGrad makes **a number of LLM calls proportional to the graph\u2019s size**.",
      "experiment_design_complexity": {
        "constant_variables": {
          "api_call_timing": "same_time"
        },
        "independent_variables": {
          "optimization_method": [
            "OptoPrime",
            "TextGrad"
          ],
          "optimization_task": [
            "Solution Optimization",
            "Prompt Optimization"
          ],
          "llm_model": [
            "The optimizer is GPT-4o-2024-08-06",
            "The student model is GPT-35-turbo-1106"
          ]
        },
        "dependent_variables": {
          "time_in_minutes": "Measured as the total time taken for optimization"
        }
      },
      "experiment_setup_complexity": {
        "experiment_setup_complexity": {
          "components": [
            "Trace framework (OptoPrime optimizer)",
            "TextGrad framework",
            "LLM APIs (GPT-4o-2024-08-06, GPT-35-turbo-1106)",
            "Optimization tasks (Solution Optimization, Prompt Optimization)",
            "Evaluation function (automatic comparison of outputs to ground truth)",
            "Performance metric (time in minutes)",
            "Hardware setup (We run the experiments on a standard PC with 16 GB RAM)"
          ],
          "setup_steps": [
            "Configure and initialize the Trace framework",
            "Integrate TextGrad as an optimizer within Trace",
            "Ensure LLM API access for both frameworks",
            "Load dataset for Solution Optimization and Prompt Optimization tasks",
            "Run optimization trials for OptoPrime and TextGrad using identical conditions",
            "Collect results: execution time and LLM calls per optimization step",
            "Compare and analyze results to evaluate efficiency and effectiveness"
          ],
          "possible_modifications": {
            "increase_interconnected_components": [
              "Introduce additional optimization tasks beyond Solution and Prompt Optimization",
              "Evaluate optimization performance across multiple LLMs (e.g., GPT-4o, Claude, Gemini)",
              "Incorporate an additional evaluation metric, such as optimization success rate"
            ],
            "add setup dependencies": [
              "Require integration with external logging frameworks for tracking optimization steps",
              "Introduce constraints on LLM API usage to evaluate optimization efficiency under token limits"
            ]
          }
        }
      },
      "experiment_uncertainty": {
        "random_uncertainty": {
          "source": "Variability in LLM API response times",
          "description": "LLM API responses may have fluctuations in latency, leading to inconsistent time measurements across optimization trials.",
          "impact": "Results in variations in recorded optimization time, affecting performance comparisons.",
          "possible_modifications": [
            "Introduce artificial delays in API response times to test optimizer robustness.",
            "Randomly drop tokens from API responses to simulate noise in optimization feedback.",
            "Vary the temperature parameter for LLM calls, injecting randomness into text outputs."
          ]
        },
        "systematic_uncertainty": {}
      },
      "experiment_constraints": {
        "resource_constraints": {},
        "time_constraints": {},
        "money_constraints": {},
        "possible_modifications": {
          "tightening_existing constraints": [
            "Restrict LLM API usage further by enforcing a stricter token budget.",
            "Reduce the allowed optimization iterations for all methods to amplify differences in efficiency.",
            "Enforce model size constraints by requiring performance parity with a smaller model (e.g., using GPT-4o-mini instead of GPT-4o)."
          ]
        }
      }
    },
    {
      "question": "- **Are image needles significantly more challenging for current MLLMs than text needles in long multimodal documents?**\n\n\n- **Are image needles significantly more challenging for current MLLMs than text needles in long multimodal documents?**",
      "method": "Design an experiment using a set of multimodal documents where needles are separately inserted as text and as images. Evaluate each model\u2019s performance on retrieval, counting, and reasoning tasks for both text and image needles. Compare accuracy and soft accuracy metrics between the two types of needles across all models. Qualitatively analyze error cases for image needles and quantify how often predicted outputs for image needles mismatch the actual number of images or details when compared with text needles.\n  \n1. **Task Setup:**  \n   - **Goal:** Compare Trace and TextGrad for AI workflow optimization.  \n   - **Key Difference Between Methods:**  \n     - **Trace propagates minimal subgraphs** to separate tracing infrastructure from optimization algorithms.  \n     - **TextGrad propagates text feedback**, tightly coupling infrastructure and optimization.   \n\n2. **Experimental Design for Fair Comparison:**  \n   - Applied **Trace directly to the evaluation code released with the TextGrad library**.  \n   - Both frameworks used the **same LLM APIs at around the same time** to ensure fairness.  \n   - **Optimization Tasks Compared:**  \n     - **Solution Optimization** (TextGrad Table 2).  \n     - **Prompt Optimization** (TextGrad Table 3).  \n\n3. **Comparative Evaluation:**  \n   - **OptoPrime (Trace\u2019s optimizer)**  \n   - **TextGrad (original implementation)**",
      "expected_outcome": "The experiment should confirm that models consistently perform worse on image needle tasks relative to text needle tasks, with significantly lower accuracy and soft accuracy scores. Error analyses are likely to show failure cases such as inability to count images correctly or to extract relevant details from images.\n  \n- **OptoPrime should be approximately 3x faster than TextGrad**, since:  \n  - OptoPrime makes **one LLM call per optimization step**.  \n  - TextGrad makes **a number of LLM calls proportional to the graph\u2019s size**.",
      "experiment_design_complexity": {
        "constant_variables": {
          "api_call_timing": "same_time"
        },
        "independent_variables": {
          "optimization_method": [
            "OptoPrime",
            "TextGrad"
          ],
          "optimization_task": [
            "Solution Optimization",
            "Prompt Optimization"
          ],
          "llm_model": [
            "The optimizer is GPT-4o-2024-08-06",
            "The student model is GPT-35-turbo-1106"
          ]
        },
        "dependent_variables": {
          "time_in_minutes": "Measured as the total time taken for optimization"
        }
      },
      "experiment_setup_complexity": {
        "experiment_setup_complexity": {
          "components": [
            "Trace framework (OptoPrime optimizer)",
            "TextGrad framework",
            "LLM APIs (GPT-4o-2024-08-06, GPT-35-turbo-1106)",
            "Optimization tasks (Solution Optimization, Prompt Optimization)",
            "Evaluation function (automatic comparison of outputs to ground truth)",
            "Performance metric (time in minutes)",
            "Hardware setup (We run the experiments on a standard PC with 16 GB RAM)"
          ],
          "setup_steps": [
            "Configure and initialize the Trace framework",
            "Integrate TextGrad as an optimizer within Trace",
            "Ensure LLM API access for both frameworks",
            "Load dataset for Solution Optimization and Prompt Optimization tasks",
            "Run optimization trials for OptoPrime and TextGrad using identical conditions",
            "Collect results: execution time and LLM calls per optimization step",
            "Compare and analyze results to evaluate efficiency and effectiveness"
          ],
          "possible_modifications": {
            "increase_interconnected_components": [
              "Introduce additional optimization tasks beyond Solution and Prompt Optimization",
              "Evaluate optimization performance across multiple LLMs (e.g., GPT-4o, Claude, Gemini)",
              "Incorporate an additional evaluation metric, such as optimization success rate"
            ],
            "add setup dependencies": [
              "Require integration with external logging frameworks for tracking optimization steps",
              "Introduce constraints on LLM API usage to evaluate optimization efficiency under token limits"
            ]
          }
        }
      },
      "experiment_uncertainty": {
        "random_uncertainty": {
          "source": "Variability in LLM API response times",
          "description": "LLM API responses may have fluctuations in latency, leading to inconsistent time measurements across optimization trials.",
          "impact": "Results in variations in recorded optimization time, affecting performance comparisons.",
          "possible_modifications": [
            "Introduce artificial delays in API response times to test optimizer robustness.",
            "Randomly drop tokens from API responses to simulate noise in optimization feedback.",
            "Vary the temperature parameter for LLM calls, injecting randomness into text outputs."
          ]
        },
        "systematic_uncertainty": {}
      },
      "experiment_constraints": {
        "resource_constraints": {},
        "time_constraints": {},
        "money_constraints": {},
        "possible_modifications": {
          "tightening_existing constraints": [
            "Restrict LLM API usage further by enforcing a stricter token budget.",
            "Reduce the allowed optimization iterations for all methods to amplify differences in efficiency.",
            "Enforce model size constraints by requiring performance parity with a smaller model (e.g., using GPT-4o-mini instead of GPT-4o)."
          ]
        }
      }
    },
    {
      "question": "- **Does incorporating a Retrieval-Augmented Generation (RAG) module improve text needle retrieval performance but not improve image needle retrieval in MLLMs like InternVL-1.5?**\n\n\n- **Does incorporating a Retrieval-Augmented Generation (RAG) module improve text needle retrieval performance but not improve image needle retrieval in MLLMs like InternVL-1.5?**",
      "method": "Use InternVL-1.5 and its RAG-enhanced variant to run evaluations on both text and image needle tasks. First, evaluate text needle retrieval, counting, and reasoning tasks with and without the RAG method, recording the accuracy metrics. Then, perform similar evaluations for image needle tasks. Compare the metrics to determine if RAG significantly boosts performance in text-based queries while leaving image-based tasks unaffected or degraded. Document qualitative failure cases, particularly noting if extracted content for image needles is incomplete due to document chunking in the RAG module.\n  \n1. **Task Setup:**  \n   - **Goal:** Compare Trace and TextGrad for AI workflow optimization.  \n   - **Key Difference Between Methods:**  \n     - **Trace propagates minimal subgraphs** to separate tracing infrastructure from optimization algorithms.  \n     - **TextGrad propagates text feedback**, tightly coupling infrastructure and optimization.   \n\n2. **Experimental Design for Fair Comparison:**  \n   - Applied **Trace directly to the evaluation code released with the TextGrad library**.  \n   - Both frameworks used the **same LLM APIs at around the same time** to ensure fairness.  \n   - **Optimization Tasks Compared:**  \n     - **Solution Optimization** (TextGrad Table 2).  \n     - **Prompt Optimization** (TextGrad Table 3).  \n\n3. **Comparative Evaluation:**  \n   - **OptoPrime (Trace\u2019s optimizer)**  \n   - **TextGrad (original implementation)**",
      "expected_outcome": "The expected outcome is that the RAG-enhanced model will show a substantial improvement in performance on text needle tasks (as shown by higher accuracy scores) but will not exhibit similar improvements on image needle tasks. This will support the claim that RAG methods might not be suitable when comprehensive image comprehension is required.\n  \n- **OptoPrime should be approximately 3x faster than TextGrad**, since:  \n  - OptoPrime makes **one LLM call per optimization step**.  \n  - TextGrad makes **a number of LLM calls proportional to the graph\u2019s size**.",
      "experiment_design_complexity": {
        "constant_variables": {
          "api_call_timing": "same_time"
        },
        "independent_variables": {
          "optimization_method": [
            "OptoPrime",
            "TextGrad"
          ],
          "optimization_task": [
            "Solution Optimization",
            "Prompt Optimization"
          ],
          "llm_model": [
            "The optimizer is GPT-4o-2024-08-06",
            "The student model is GPT-35-turbo-1106"
          ]
        },
        "dependent_variables": {
          "time_in_minutes": "Measured as the total time taken for optimization"
        }
      },
      "experiment_setup_complexity": {
        "experiment_setup_complexity": {
          "components": [
            "Trace framework (OptoPrime optimizer)",
            "TextGrad framework",
            "LLM APIs (GPT-4o-2024-08-06, GPT-35-turbo-1106)",
            "Optimization tasks (Solution Optimization, Prompt Optimization)",
            "Evaluation function (automatic comparison of outputs to ground truth)",
            "Performance metric (time in minutes)",
            "Hardware setup (We run the experiments on a standard PC with 16 GB RAM)"
          ],
          "setup_steps": [
            "Configure and initialize the Trace framework",
            "Integrate TextGrad as an optimizer within Trace",
            "Ensure LLM API access for both frameworks",
            "Load dataset for Solution Optimization and Prompt Optimization tasks",
            "Run optimization trials for OptoPrime and TextGrad using identical conditions",
            "Collect results: execution time and LLM calls per optimization step",
            "Compare and analyze results to evaluate efficiency and effectiveness"
          ],
          "possible_modifications": {
            "increase_interconnected_components": [
              "Introduce additional optimization tasks beyond Solution and Prompt Optimization",
              "Evaluate optimization performance across multiple LLMs (e.g., GPT-4o, Claude, Gemini)",
              "Incorporate an additional evaluation metric, such as optimization success rate"
            ],
            "add setup dependencies": [
              "Require integration with external logging frameworks for tracking optimization steps",
              "Introduce constraints on LLM API usage to evaluate optimization efficiency under token limits"
            ]
          }
        }
      },
      "experiment_uncertainty": {
        "random_uncertainty": {
          "source": "Variability in LLM API response times",
          "description": "LLM API responses may have fluctuations in latency, leading to inconsistent time measurements across optimization trials.",
          "impact": "Results in variations in recorded optimization time, affecting performance comparisons.",
          "possible_modifications": [
            "Introduce artificial delays in API response times to test optimizer robustness.",
            "Randomly drop tokens from API responses to simulate noise in optimization feedback.",
            "Vary the temperature parameter for LLM calls, injecting randomness into text outputs."
          ]
        },
        "systematic_uncertainty": {}
      },
      "experiment_constraints": {
        "resource_constraints": {},
        "time_constraints": {},
        "money_constraints": {},
        "possible_modifications": {
          "tightening_existing constraints": [
            "Restrict LLM API usage further by enforcing a stricter token budget.",
            "Reduce the allowed optimization iterations for all methods to amplify differences in efficiency.",
            "Enforce model size constraints by requiring performance parity with a smaller model (e.g., using GPT-4o-mini instead of GPT-4o)."
          ]
        }
      }
    }
  ]
}