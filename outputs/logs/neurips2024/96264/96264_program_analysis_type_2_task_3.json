{
  "requirements": [
    "Step 1: Set up a pipeline class that can handle both API-based and local language model inference, supporting different model types and configurations (/workspace/bot_pipeline.py:11-66)",
    "Step 2: Create a Buffer of Thoughts (BoT) class that initializes with user input, API key, model parameters, and meta-buffer (/workspace/bot_pipeline.py:71-84)",
    "Step 3: Implement problem distillation to extract key information from the input math problem using the language model (/workspace/bot_pipeline.py:89-92)",
    "Step 4: Implement buffer retrieval functionality to find relevant thought templates from the meta-buffer based on the problem description (/workspace/bot_pipeline.py:94-101, 103-108)",
    "Step 5: Implement buffer instantiation to apply the retrieved thought templates to the specific problem and generate a solution (/workspace/bot_pipeline.py:103-109)",
    "Step 6: Create a buffer manager to update the meta-buffer with new problem-solution pairs (/workspace/bot_pipeline.py:111-114)",
    "Step 7: Implement thought distillation to generalize problem-solution pairs into reusable templates (/workspace/bot_pipeline.py:116-138)",
    "Step 8: Create an inference script that initializes the BoT framework with appropriate parameters and runs the inference pipeline (/workspace/inference.py:1-30)",
    "Final Step: Execute the BoT inference workflow (problem distillation, buffer instantiation, buffer management) to solve the math word problem (/workspace/bot_pipeline.py:205-209)"
  ],
  "agent_instructions": "Your task is to implement a Buffer of Thoughts (BoT) framework for solving math word problems. The framework should follow these key steps:\n\n1. Create a system that can work with either OpenAI API or local language models for inference\n\n2. Implement the core BoT framework with these components:\n   - Problem distillation: Extract key information from a math word problem\n   - Meta-buffer: Store and retrieve thought templates (patterns for solving different types of problems)\n   - Buffer instantiation: Apply relevant thought templates to the specific problem\n   - Solution generation: Generate a step-by-step solution based on the instantiated templates\n   - Buffer management: Update the meta-buffer with new problem-solution pairs\n   - Thought distillation: Convert problem-solution pairs into generalized templates\n\n3. The framework should follow this workflow:\n   - Take a math word problem as input\n   - Distill the problem to extract key information\n   - Retrieve relevant thought templates from the meta-buffer\n   - Instantiate the templates for the specific problem\n   - Generate a solution with clear reasoning steps\n   - Update the meta-buffer with the new problem-solution pair\n   - Return the final answer\n\n4. Create a simple interface to initialize the framework with appropriate parameters (API key, model IDs, etc.) and run inference on a given math problem\n\nThe implementation should be flexible enough to handle different types of math word problems and should clearly show the step-by-step reasoning process leading to the final answer."
}